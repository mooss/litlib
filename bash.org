#+title: LitLib Bash
#+author: mooss

#+property: header-args :wrap "src text :minipage"
#+property: header-args:bash+ :noweb no-export
#+options: ^:nil

* Prelude

** Code block inclusion

#+name: include
#+begin_src bash :var __blocks_to_include=""
./include.pl bash.org ":noweb $__blocks_to_include"
#+end_src


* Noweb arguments

I love Bash, especially when looking at it like a glue between modular utilities (pipes are such a simple yet incredibly powerful mechanism).
Something that I don't like to do, but frequently need to do in Bash is parsing arguments.
This section presents an awesome hack that can be used to somewhat bypass arguments parsing.

The trick is to use the noweb arguments syntax to initialise variables.
The code block below will parse the noweb variables inside the =$noweb= variable and instantiate them.
It was not made into a function because I failed to make the =declare='d variables escape the function scope.
#+begin_src bash :eval never :noweb-ref load-noweb-impl :minipage
if [ -n "$noweb" ]; then
    while IFS= read -r -d $'\0' definition; do
        declare "$definition"
    done < <(echo "$noweb" | sedrex)
fi
#+end_src
#+depends:load-noweb-impl :noweb sedrex

A part of the magic at play here is handled by =sedrex=.
This command makes a few transformations to =$noweb= to make it into a null-separated list of variable definitions.

The rest of the magic is using this one weird =while IFS= trick borrowed from https://stackoverflow.com/a/8677566 to iterate on said null-separated list of variable definitions.

** Dependencies

Because this noweb-loading code block has dependencies, they must be resolved via the include script.
#+name: load-noweb
#+begin_src bash :minipage
./include.pl bash.org ':noweb load-noweb-impl'
#+end_src


** Basic usage

A bash variable called =noweb= containing a noweb-style variables definition must be placed before the call to the loading block.
#+begin_src bash :exports both :minipage
noweb=":first 6 :lost 4 8 15 16 23 42 :last 108"
<<load-noweb()>>
echo "'$first'"
echo "'$lost'"
echo "'$last'"
#+end_src

#+RESULTS:
#+begin_src text :minipage
'6'
'4 8 15 16 23 42'
'108'
#+end_src


** "Parsing" (=sedrex=)

=sedrex=, the "parsing" function associated to =noweb-load= will be explained line by line.
It kinda looks like an asymmetrical spaceship, a sideways evil throne or the emerging city of Atlantis.
# Poseidon, Ancient tyrant ruling the ocean of space.
#+name: sedrex
#+begin_src bash :minipage
function sedrex() {
    sed -r\
        -e 's|$|\x0|'\
        -e 's|(^\| ):|\x1|g'\
        -e 's|\x1([^ \x1]+) |\x0\1=|g'\
        -e 's|\x1([^ \x1\x0]+)|\x0\1=\x3|g'\
        -e 's|^\x0||'
}
#+end_src
This function was named based on the content of its implementation.
The first three letters are self-explanatory, =r= is for the extended regex flag (=-r=), =e= for the 5 scripts (=-e=) and =x= for the control codes (=\x0=, =\x1= and =\x3=).
I could't fit a =s= in here without ruining the regalian vibe.

Here is the promised line-by-line breakdown of =sedrex=:
 1. *=sed -r=*

    The whole function is only a call to =sed=, acting on the content of =stdin=, with extended regular expressions enabled.

    The following line explanations will assume that =stdin= is /=:lost 4 8 15 16 23 42 :last=/.

 2. *=-e 's|$|\x0|'=*

    _=\x0=_ is equivalent to C's null character (the =char= ='\0'=).
    So this adds a null character at the end of =stdin=, because this is expected by the =while IFS= loop.

    =stdin= is now /=:lost 4 8 15 16 23 42 :last\x0=/.

 3. *=-e 's|(^\| ):|\x1|g'=*

    _=\x1=_ is a a start of heading character (SOH).
    With this line, all _=:=_ prefixed by a space or the start of =stdin= are replaced by SOH.
    Therefore SOH characters are used to mark the start of a variable definition.

    =stdin= is now /=\x1lost 4 8 15 16 23 42\x1last\x0=/.

 4. *=-e 's|\x1([^ \x1]+) |\x0\1=|g'=*

    _=\x1([^ \x1]+)=_ captures a *single* variable identifier without its SOH prefix.
    Thanks to the subsequent space, this line captures non-empty variable identifiers and transforms them into bash variable assignments.
    They are this time prefixed with null characters, giving us a way to easily distinguish between variables having already been transformed into bash variable assignments and the others.
    Those others are by definition empty variables.

    =stdin= is now /~\x0lost=4 8 15 16 23 42\x1last\x0~/.

 5. *=-e 's|\x1([^ \x1\x0]+)|\x0\1=\x3|g'=*

    _=\x1([^ \x1\x0]+)=_ also captures a single variable identifier without SOH, =\x0= is also explicitely excluded to avoid matching a variable definition already transformed by the previous line.
    This line transforms empty variables into bash variable to which the value _=\x3=_ is assigned.
    This is done in order to make empty variables easily distinguishable from both non declared and non empty ones.

    =stdin= is now /~\x0lost 4 8 15 16 23 42\x0last=\x3\x0~/.

 6. *=-e 's|^\x0||'=*

    This removes the leading null character, otherwise it would result in an empty =$definition= in the =while IFS= loop.
    The leading _=\x0=_ symbol was only put in place to make the lines 4 and 5 behave the same way for the first definition and the subsequent ones.

    =stdin= is now /~lost=4 8 15 16 23 42\x0last=\x3\x0~/, ready to be processed by the =while IFS= loop.


Here is an illustration of what =sedrex= does:
#+begin_src bash :exports both :minipage
<<sedrex>>
echo ":one :two :three :four 4 :lost 4 8 15 16 23 42 :penultimate :last"\
    | sedrex\
    | sed -e 's/\x3/EMPTY/g' -e 's/\x0/\n/g'
#+end_src

#+RESULTS:
#+begin_src text :minipage
one=EMPTY
two=EMPTY
three=EMPTY
four=4
lost=4 8 15 16 23 42
penultimate=EMPTY
last=EMPTY

#+end_src


** Conclusion

As mentioned before, this variable definition mechanism does not replace but rather bypasses arguments parsing.
It could have been implemented with a more standard syntax, like =argument=va lue, other=23= or without the comma =argument=va lue other=23=, but I much prefer =:argument va lue :other 23=.

It is only a way to define arbitrary variables from a string, which can be transmitted from outside the script.
It does not verify anything and does not generate errors by itself.
Tools to perform some amount of verification and error handling are discussed in the next section.


* Noweb suite

Where the previous section laid out the bases of an argument processing system by establishing a mechanism allowing to easily define variables, this one builds upon it with tools to manipulate those variables.

#+depends:noweb-suite :noweb load-noweb-impl assertions

** Predicates on indirected variables

=declared=, =empty= and =valued= are using indirection to test against the value of the variable whose name is contained in their first argument.
For example, if =$lost= is =4 8 15 16 23 42= when =defined lost= is called, the value of =$1= is the string ~"lost"~ and by indirection the value of ="${!1}"= is the value of =$lost= (=4 8 15 16 23 42=).

#+begin_src bash :noweb-ref assertions :minipage
function declared() {
    test -n "${!1}"
}
function empty() {
    test "${!1}" == $'\3'
}
function valued() {
    declared $1 && ! empty $1
}
#+end_src
Pandoc's syntax highlighting doesn't like this ="${!1}"= syntax, but in practice i'm pretty sure it is correct.

Usage:
#+begin_src bash :exports both :minipage
noweb=":lost 4 8 15 16 23 42 :last"
<<include("noweb-suite")>>

for param in lost last least; do
    valued $param && echo $param is defined to "\`${!param}\`"
    empty $param && echo $param is empty
    ! declared $param && echo $param was not declared
done
#+end_src

#+RESULTS:
#+begin_src text :minipage
lost is defined to `4 8 15 16 23 42`
last is empty
least was not declared
#+end_src


** Assertions

*** =assert=

Assertion are implemented as a very simple function executing its argument and exiting with an error message shoud this execution return an error.
#+begin_src bash :noweb-ref assertions :minipage
function assert() {
    if ! "$@"; then
        echo "Assertion failed: \`$@\`."
        exit
    fi
}
#+end_src
Notes:
 - The error message is not printed to =stderr=, because Org mode results only include =stdin=.
 - No error code is sent with =exit=, because it would cause an error message in a popup and empty results.
   I much prefer when everything is included in the results.

Usage:
#+begin_src bash :exports both :minipage
noweb=":one :two :lost 4 8 15 16 23 42 :last"
<<include("noweb-suite")>>
assert declared lost
echo lost is declared
assert empty lost
echo lost is empty
#+end_src

#+RESULTS:
#+begin_src text :minipage
lost is declared
Assertion failed: `empty lost`.
#+end_src

*** =assert-no-error=

This hardcoded assertion uses =$?= to verify that the last command did not result in an error.
It can take a message because I know of no way to get the last command called so in case of multiple =assert-no-error=, the one that failed would be less obvious.

A newline is added before the exit message because it is susceptible to span multiple lines.

#+begin_src bash :noweb-ref assertions :minipage
function assert-no-error() {
    status=$?
    if test $status -ne 0; then
        echo "Exit status is non zero ($status):
$@."
        exit
    fi
}
#+end_src

Usage:
#+begin_src bash :exports both :minipage
<<include("noweb-suite")>>
true
assert-no-error true
false
assert-no-error false
true
#+end_src

#+RESULTS:
#+begin_src text :minipage
Exit status is non zero (1):
false.
#+end_src

*** Assert chain

Applies an assertion to several parameters.

#+begin_src bash :noweb-ref assertions :minipage
function assert-chain() {
    predicate="$1"; shift
    while test $# -ge 1; do
        assert $predicate $1; shift
    done
}
#+end_src

Usage:
#+begin_src bash
noweb=":four :eight :sixteen 16"
<<include("noweb-suite")>>
assert-chain declared four eight sixteen
echo All are defined.
assert-chain empty four eight sixteen
echo All are empty.
#+end_src

#+RESULTS:
#+begin_src text :minipage
All are defined.
Assertion failed: `empty sixteen`.
#+end_src


* Other utilities

** Capture =stderr=

This small helper saves the output of a command inside the variable =$stderr=.
#+name: capture-stderr
#+begin_src bash :minipage
function capture-stderr() {
    buffer=$(mktemp)
    "$@" 2> "$buffer"
    stderr=$(cat "$buffer")
    rm "$buffer"
}
#+end_src
Notes:
 - Quoting =$@= forwards the parameters as-is.
   For example if =$@='s =echo "15 16" 23=, using it unquoted would execute =echo 15 16 23= where the quoted version would execute =echo "15 16" 23=.

Usage:
#+begin_src bash :exports both :minipage
<<capture-stderr>>
function error_prone() {
    echo 'Everything is well.'
    >&2 echo 'Terrible things are happening.'
    echo 'Progress is steady.'
    >&2 echo 'I must have broken a mirror.'
    echo 'Almost done.'
    >&2 echo 'Oh my god ITS ALIVE!'
}

echo stdout:
capture-stderr error_prone
echo
echo stderr:
echo "$stderr"
#+end_src

#+RESULTS:
#+begin_src text :minipage
stdout:
Everything is well.
Progress is steady.
Almost done.

stderr:
Terrible things are happening.
I must have broken a mirror.
Oh my god ITS ALIVE!
#+end_src


** Failure functions

Print to stderr:
#+name: error
#+begin_src bash
function error() {
    >&2 echo "$@"
}
#+end_src

Exit with an error and print message to stderr:
#+name: die
#+begin_src bash
function die() {
    error_code=$1; shift
    error "$@"
    exit $error_code
}
#+end_src
#+depends:die :noweb error

Exit with an error but print to stdout:
#+name: fail
#+begin_src bash
function fail() {
    error_code=$1; shift
    echo "$@"
    exit $error_code
}
#+end_src

Exit without error and print to stdout:
#+name: stop
#+begin_src bash
function stop() {
    echo "$@"
    exit
}
#+end_src



* Experimental ideas
:PROPERTIES:
:header-args:
:END:

This section is a dumping ground for ideas that have not really been tested yet but that might eventually prove useful or inspirational.

** Include as Heredoc

Including blocks as Heredocs can allow a great deal of flexibility when manipulating code blocks in bash.

#+name: hereclude
#+begin_src bash :var __blocks_to_include="" __cmd="" __post="" :wrap src bash
# Random string (tr | head) from https://stackoverflow.com/a/62087619.
unique_identifier="$(LC_ALL=C tr -dc A-Za-z0-9 </dev/urandom | head -c 20)$(date '+%s%N')"
__org_sources="wasm.org"
echo "$__cmd <<$unique_identifier $__post"
./include.pl bash.org ":noweb $__blocks_to_include"
echo "$unique_identifier"
#+end_src

*** Usage

This block will be used to illustrate =hereclude='s usage:
#+name: lost-numbers
#+begin_src text
4
8
15
16
23
42
#+end_src

This is how a Heredoc inclusion of the block above would look like (this is just for illustration purposes):
#+Call: hereclude("lost-numbers", "cat", "| sed 's|.*| -> &|' | nl -w1 -s ''")

#+RESULTS:
#+begin_src bash
cat <<aIvAUYsycFzabSvgDunG1631900104698751394 | sed 's|.*| -> &|' | nl -w1 -s ''
4
8
15
16
23
42
aIvAUYsycFzabSvgDunG1631900104698751394
#+end_src

The intended way to use =hereclude= is to call it directly inside a bash code block:

#+begin_src bash
echo Found the lost numbers:
<<hereclude("lost-numbers", "cat", "| sed 's|.*| -> &|' | nl -w1 -s ''")>>
#+end_src

#+RESULTS:
:results:
Found the lost numbers:
1 -> 4
2 -> 8
3 -> 15
4 -> 16
5 -> 23
6 -> 42
:end:

